# Task List

This document tracks outstanding work on the MVP.

Note: the lightweight Hunyuan3D API server files were moved from `img/` to `backend/hunyuan_server/` so `img/` only contains image assets.

## Model Generation & Queue

- Integrate Hunyuan 2.5 as the generator for text, image and text+image prompts.
- Replace the simple print queue with a real queue module.

## Front-End

- Improve UI error handling.
- Ensure accessibility with ARIA labels and contrast.

## Community Creations

- Fetch and display recent creations.
- Fetch and display popular creations.
- Implement pagination or infinite scrolling.
- Add filters by category or date.
- Store submissions in a `community_creations` table.

## Testing & CI

- Add unit tests for frontend scripts.
- Mock the Hunyuan API in server tests for error paths.

## Documentation

- Add architecture diagrams in `docs/`.

## Cleanup

- Review all console logs.
- Check for unused dependencies in `package.json`.

## Profiles & Competitions

- Display like counts in the community gallery and profiles.
- Use like counts to populate the "popular now" list.
- Create a `competitions` table with name and date fields.
- Add a `competition_entries` table linking models to competitions.
- Expose APIs to submit models to competitions and fetch leaderboards.
- Show active competitions and leaderboards on the frontend.
- Add `prize_description` and `winner_model_id` columns to the `competitions` table.
- Build admin-only endpoints to create, update, and delete competitions.
- Create a competition submission form allowing a user to link an existing model to a competition.
- Ensure a model can only be submitted to one active competition at a time.
- Schedule a job to close competitions, select the entry with the most likes, and update `winner_model_id`.
- Send an email to the winning user with instructions to claim their free print.
- Display past competitions and winners on a dedicated page.
- Add competition rules to the documentation.

## UX Improvements

- Guide the user with a step-by-step wizard from entering a prompt through to checkout.
- Provide pre-made example prompts and images to help new visitors start quickly.
- Add drag-and-drop image uploads with inline cropping and resizing.
- Show a real-time progress bar while the model is being generated.
- Display clear inline error messages if generation fails or the prompt is invalid.
- Keep the generated model and prompt in local storage so users can resume where they left off.
- Integrate social login (Google, GitHub) and allow guest checkout without creating an account.
- Automatically prefill shipping and payment details from the user's profile.
- Offer a one-click "Buy Now" button directly on the model viewer page.
- Let users edit the prompt or images without losing the current model.
- Ensure all interactions work smoothly on mobile with responsive layouts.
- Make keyboard navigation and screen reader labels first-class.
- Provide a "reorder" button for past models so users can purchase again instantly.
- Show estimated print cost and delivery time before checkout.
- Let users share a generated model to the community or social media with one click.
- Provide tooltips or a short tutorial overlay explaining each step.
- Add a progress indicator at the top summarizing "Prompt → Model → Buy."
- Optimize API requests to reduce loading time on slow networks.
- Save user preferences such as units or color scheme.
- Provide instant confirmation with next steps after the payment completes.
- Link directly from the success page to the user's profile or order history.
