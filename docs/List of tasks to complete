# Task List

This document tracks outstanding work on the MVP.

Note: the lightweight Hunyuan3D API server files were moved from `img/` to `backend/hunyuan_server/` so `img/` only contains image assets.

## Model Generation & Queue


## Front-End

- Ensure accessibility with ARIA labels and contrast.
  - Audit pages for missing labels.
  - Fix color contrast issues.

## Community Creations



## Testing & CI

- Add unit tests for frontend scripts.
  - Write tests for each UI module.

## Cleanup

## Profiles & Competitions

  - Update the admin UI to edit prize details.
  - Create a competition submission form allowing a user to link an existing model to a competition.
  - Build the form UI and validation.
  - POST the selected model to the competition entry API.


## UX Improvements

- Guide the user with a step-by-step wizard from entering a prompt through to checkout.
  - Design the wizard UI flow.
  - Persist form data across steps.
- Provide pre-made example prompts and images to help new visitors start quickly.
- Add drag-and-drop image uploads with inline cropping and resizing.
  - Implement a drag-and-drop area.
  - Integrate a client-side cropping library.
- Show a real-time progress bar while the model is being generated.
  - Add a progress bar component.
- Display clear inline error messages if generation fails or the prompt is invalid.
  - Provide failure states in the UI.
  - Validate prompts before submission.
- Integrate social login (Google, GitHub) and allow guest checkout without creating an account.
  - Add Google OAuth login.
  - Add GitHub OAuth login.
  - Offer guest checkout option.
- Automatically prefill shipping and payment details from the user's profile.
  - Retrieve saved profile info from the backend.
  - Populate the checkout form with the saved data.
- Offer a one-click "Buy Now" button directly on the model viewer page.
  - Add a button that uses saved details.
  - Submit the order in one step.
- Let users edit the prompt or images without losing the current model.
  - Keep the previous model in memory.
  - Re-run generation only when edits are confirmed.
- Ensure all interactions work smoothly on mobile with responsive layouts.
  - Add responsive CSS for each page.
  - Test flows at mobile breakpoints.
- Make keyboard navigation and screen reader labels first-class.
  - Define a consistent tab order.
  - Add missing ARIA labels.
- Provide a "reorder" button for past models so users can purchase again instantly.
  - Add a button to order history.
  - Preload the model into the cart.
- Show estimated print cost and delivery time before checkout.
  - Calculate cost and ETA from model parameters.
  - Display them near the checkout button.
- Let users share a generated model to the community or social media with one click.
  - Provide Open Graph meta tags for previews.
  - Implement GET /api/shared/:slug endpoint to fetch shared model metadata.
- Provide tooltips or a short tutorial overlay explaining each step.
  - Design tooltip copy and dismiss logic.
  - Allow users to skip the tutorial.
- Add a progress indicator at the top summarizing "Prompt → Model → Buy."
  - Display the current step at all times.
- Optimize API requests to reduce loading time on slow networks.
  - Bundle multiple requests where possible.
- Save user preferences such as units or color scheme.
  - Persist preferences to local storage.
  - Apply them on page load.

## Referral System

