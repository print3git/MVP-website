// AUTO-GENERATED by scripts/generate-glb-tests.js â€” do not edit by hand
const {
  ingestGlb,
  validateSchema,
  transformGlb,
  renderGlb,
  uploadGlb,
} = require("../src/glbPipeline.js");

describe("Ingestion", () => {
  it("Accept a well-formed .glb case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Accept a well-formed .glb case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Reject non-glb by extension case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by extension case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Reject non-glb by header bytes case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
});

describe("Schema Validation", () => {
  it("Required chunk types (JSON, BIN) case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Required chunk types (JSON, BIN) case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Missing JSON chunk case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Missing JSON chunk case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Unexpected extra chunks case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
});

describe("Field-Level Checks", () => {
  it("scene.nodes array exists case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("scene.nodes array exists case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("mesh.primitives[].indices is number case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("mesh.primitives[].indices is number case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("bufferView.byteLength matches actual case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
});

describe("Size & Limits", () => {
  it("Tiny glb (<1KB) case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Tiny glb (<1KB) case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Huge glb (>100 MB) case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Huge glb (>100 MB) case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Exactly-on-limit case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Exactly-on-limit case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
});

describe("Transformation", () => {
  it("Round-trip importâ†’export preserves semantics case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Round-trip importâ†’export preserves semantics case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata pass-through (name, extras) case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
});

describe("Optimization", () => {
  it("Draco-compressed vs. uncompressed case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Draco-compressed vs. uncompressed case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
  it("Quantization artifacts tolerances case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(transformGlb(buffer)).resolves.toMatchObject({});
  });
});

describe("Compatibility", () => {
  it("Load in three.js case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in three.js case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in babylon.js case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Load in your custom loader case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
});

describe("Rendering Smoke", () => {
  it("Basic color geometry visible case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Basic color geometry visible case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
  it("Missing material â†’ default fallback case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(renderGlb(buffer)).resolves.toMatchObject({});
  });
});

describe("Error Cases", () => {
  it("Corrupted JSON chunk (invalid UTF-8) case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted JSON chunk (invalid UTF-8) case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Corrupted BIN chunk (truncated) case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(ingestGlb(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Invalid accessor componentType case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
});

describe("Streaming / Chunked Upload", () => {
  it("Partial upload resume case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Partial upload resume case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Canceled midway case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
  it("Canceled midway case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(uploadGlb(buffer)).rejects.toThrow();
  });
});

describe("Performance", () => {
  it("Bulk-load 100 small glbs in <2 s case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Bulk-load 100 small glbs in <2 s case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
  it("Memory doesnâ€™t spike above 200 MB case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(ingestGlb(buffer)).resolves.toMatchObject({});
  });
});

describe("Metadata & Storage", () => {
  it("S3 upload with correct Content-Type case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("S3 upload with correct Content-Type case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
  it("Metadata JSON saved in DB case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(uploadGlb(buffer)).resolves.toMatchObject({});
  });
});

describe("Edge Cases", () => {
  it("glb with zero nodes case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with zero nodes case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("glb with no meshes (only cameras) case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate invalidBuffer
    await expect(validateSchema(buffer)).rejects.toThrow();
  });
  it("Multi-scene glb case 1", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 2", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 3", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 4", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 5", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 6", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 7", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 8", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 9", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 10", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 11", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 12", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 13", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 14", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 15", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
  it("Multi-scene glb case 16", async () => {
    const buffer = Buffer.from([]); // TODO: generate validBuffer
    await expect(validateSchema(buffer)).resolves.toMatchObject({});
  });
});
